process PublishResults {
    label 'pyrosetta_tools'

    publishDir "${params.out_dir}/results", mode: 'copy', pattern: "all_designs.csv"
    publishDir "${params.out_dir}/results", mode: 'copy', pattern: "success_metrics.json"
    publishDir "${params.out_dir}/results", mode: 'copy', pattern: "best_designs*"
    publishDir "${params.out_dir}/run/report", mode: 'copy', pattern: "filter_best_designs.log"

    input:
    path final_pdbs
    path csv_scores
    val fold_count
    val filter_fold_count
    val seq_count
    val filter_seq_count
    val filter_pred_count

    output:
    path "all_designs.csv"
    path ("best_designs*"), optional: true
    path "filter_best_designs.log"
    path "success_metrics.json"

    script:

    println("\nPipeline results summary:")
    if(params.design_mode == 'bindcraft'){
        println("* Fold designs generated by BindCraft: ${fold_count}")
    }else{
        println("* Fold designs generated by RFdiffusion: ${fold_count}")
    }
    println("* Fold designs after filtering: ${filter_fold_count}")
    println("* Sequence designs generated by ${params.seq_method.toUpperCase()} (Folds * ${params.seqs_per_design}): ${seq_count} ")
    println("* Sequence designs after Sequence filtering: ${filter_seq_count}")
    println("* Predictions of designs after ${params.pred_method.toUpperCase()} filtering: ${filter_pred_count}")

    def final_pdbs_exist = final_pdbs.name != "placeholder.pdb"
    def param_combo = params.bindsweeper_param_combo ?: "default"
    def num_processes = task.cpus - 1
    
    // Check for placeholder
    if (final_pdbs_exist) {
        println("* Final predictions for analysis: ${filter_pred_count}\n")
        """
        # Create best_designs.csv with only rows for final PDB files
        python /scripts/filter_best_designs.py \
            --csv ${csv_scores} \
            --pdb-dir ./ \
            --output-csv best_designs.csv \
            --output-dir best_designs \
            2>&1 | tee filter_best_designs.log

        # Generate success metrics JSON
        python /scripts/generate_success_metrics.py \
            --fold-count ${fold_count} \
            --filter-fold-count ${filter_fold_count} \
            --seq-count ${seq_count} \
            --filter-seq-count ${filter_seq_count} \
            --filter-pred-count ${filter_pred_count} \
            --final-designs-count ${filter_pred_count} \
            --parameter-combination "${param_combo}" \
            --output success_metrics.json
        # Optionally compress PDB files
        if [ ${params.zip_pdbs} == 'true' ] ; then
            tar -h \
                --use-compress-program="pigz -p ${num_processes}" \
                -cf best_designs.tar.gz \
                best_designs
            rm -rf best_designs
        fi
        """
    }
    else {
        println("No designs survived filtering\n")
        """
        echo "No designs survived filtering" > filter_best_designs.log
        
        # Generate success metrics JSON even for failed runs
        python /scripts/generate_success_metrics.py \
            --fold-count ${fold_count} \
            --filter-fold-count ${filter_fold_count} \
            --seq-count ${seq_count} \
            --filter-seq-count ${filter_seq_count} \
            --filter-pred-count ${filter_pred_count} \
            --final-designs-count 0 \
            --parameter-combination "${param_combo}" \
            --output success_metrics.json
        """
    }
}
